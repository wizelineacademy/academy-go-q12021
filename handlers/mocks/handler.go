// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/cesararredondow/academy-go-q12021/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetPokemon mocks base method.
func (m *MockUseCase) GetPokemon(arg0 string) (*models.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemon", arg0)
	ret0, _ := ret[0].(*models.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockUseCaseMockRecorder) GetPokemon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockUseCase)(nil).GetPokemon), arg0)
}

// GetPokemonFromAPI mocks base method.
func (m *MockUseCase) GetPokemonFromAPI(id string) (*models.PokemonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonFromAPI", id)
	ret0, _ := ret[0].(*models.PokemonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonFromAPI indicates an expected call of GetPokemonFromAPI.
func (mr *MockUseCaseMockRecorder) GetPokemonFromAPI(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonFromAPI", reflect.TypeOf((*MockUseCase)(nil).GetPokemonFromAPI), id)
}

// GetPokemons mocks base method.
func (m *MockUseCase) GetPokemons() ([]*models.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemons")
	ret0, _ := ret[0].([]*models.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemons indicates an expected call of GetPokemons.
func (mr *MockUseCaseMockRecorder) GetPokemons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemons", reflect.TypeOf((*MockUseCase)(nil).GetPokemons))
}

// GetPokemonsConcurrency mocks base method.
func (m *MockUseCase) GetPokemonsConcurrency(odd, quantity, workersNumer string) ([]*models.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonsConcurrency", odd, quantity, workersNumer)
	ret0, _ := ret[0].([]*models.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonsConcurrency indicates an expected call of GetPokemonsConcurrency.
func (mr *MockUseCaseMockRecorder) GetPokemonsConcurrency(odd, quantity, workersNumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsConcurrency", reflect.TypeOf((*MockUseCase)(nil).GetPokemonsConcurrency), odd, quantity, workersNumer)
}

// GetPokemonsFromAPI mocks base method.
func (m *MockUseCase) GetPokemonsFromAPI(quantity string) ([]*models.Pokemon_api, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonsFromAPI", quantity)
	ret0, _ := ret[0].([]*models.Pokemon_api)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonsFromAPI indicates an expected call of GetPokemonsFromAPI.
func (mr *MockUseCaseMockRecorder) GetPokemonsFromAPI(quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsFromAPI", reflect.TypeOf((*MockUseCase)(nil).GetPokemonsFromAPI), quantity)
}
