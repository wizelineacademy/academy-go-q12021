// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jesus-mata/academy-go-q12021/infrastructure (interfaces: CsvSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	csv "encoding/csv"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/jesus-mata/academy-go-q12021/infrastructure/dto"
)

// MockCsvSource is a mock of CsvSource interface.
type MockCsvSource struct {
	ctrl     *gomock.Controller
	recorder *MockCsvSourceMockRecorder
}

// MockCsvSourceMockRecorder is the mock recorder for MockCsvSource.
type MockCsvSourceMockRecorder struct {
	mock *MockCsvSource
}

// NewMockCsvSource creates a new mock instance.
func NewMockCsvSource(ctrl *gomock.Controller) *MockCsvSource {
	mock := &MockCsvSource{ctrl: ctrl}
	mock.recorder = &MockCsvSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCsvSource) EXPECT() *MockCsvSourceMockRecorder {
	return m.recorder
}

// GetAllLines mocks base method.
func (m *MockCsvSource) GetAllLines() ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLines")
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLines indicates an expected call of GetAllLines.
func (mr *MockCsvSourceMockRecorder) GetAllLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLines", reflect.TypeOf((*MockCsvSource)(nil).GetAllLines))
}

// NewReader mocks base method.
func (m *MockCsvSource) NewReader() (*csv.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader")
	ret0, _ := ret[0].(*csv.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockCsvSourceMockRecorder) NewReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockCsvSource)(nil).NewReader))
}

// WriteLines mocks base method.
func (m *MockCsvSource) WriteLines(arg0 []dto.NewItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLines indicates an expected call of WriteLines.
func (mr *MockCsvSourceMockRecorder) WriteLines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLines", reflect.TypeOf((*MockCsvSource)(nil).WriteLines), arg0)
}
