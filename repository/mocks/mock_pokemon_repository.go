// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wizelineacademy/academy-go-q12021/repository (interfaces: IPokemonRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/wizelineacademy/academy-go-q12021/model"
)

// MockIPokemonRepository is a mock of IPokemonRepository interface.
type MockIPokemonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPokemonRepositoryMockRecorder
}

// MockIPokemonRepositoryMockRecorder is the mock recorder for MockIPokemonRepository.
type MockIPokemonRepositoryMockRecorder struct {
	mock *MockIPokemonRepository
}

// NewMockIPokemonRepository creates a new mock instance.
func NewMockIPokemonRepository(ctrl *gomock.Controller) *MockIPokemonRepository {
	mock := &MockIPokemonRepository{ctrl: ctrl}
	mock.recorder = &MockIPokemonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPokemonRepository) EXPECT() *MockIPokemonRepositoryMockRecorder {
	return m.recorder
}

// CloseFile mocks base method.
func (m *MockIPokemonRepository) CloseFile(arg0 *os.File) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseFile", arg0)
}

// CloseFile indicates an expected call of CloseFile.
func (mr *MockIPokemonRepositoryMockRecorder) CloseFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFile", reflect.TypeOf((*MockIPokemonRepository)(nil).CloseFile), arg0)
}

// GetAll mocks base method.
func (m *MockIPokemonRepository) GetAll() ([]model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIPokemonRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIPokemonRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockIPokemonRepository) GetByID(arg0 int) (*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPokemonRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPokemonRepository)(nil).GetByID), arg0)
}

// GetCSVDataInMemory mocks base method.
func (m *MockIPokemonRepository) GetCSVDataInMemory() (map[int]model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSVDataInMemory")
	ret0, _ := ret[0].(map[int]model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSVDataInMemory indicates an expected call of GetCSVDataInMemory.
func (mr *MockIPokemonRepositoryMockRecorder) GetCSVDataInMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSVDataInMemory", reflect.TypeOf((*MockIPokemonRepository)(nil).GetCSVDataInMemory))
}

// OpenFile mocks base method.
func (m *MockIPokemonRepository) OpenFile() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockIPokemonRepositoryMockRecorder) OpenFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockIPokemonRepository)(nil).OpenFile))
}

// StoreToCSV mocks base method.
func (m *MockIPokemonRepository) StoreToCSV(arg0 model.PokemonAPI) (*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreToCSV", arg0)
	ret0, _ := ret[0].(*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreToCSV indicates an expected call of StoreToCSV.
func (mr *MockIPokemonRepositoryMockRecorder) StoreToCSV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreToCSV", reflect.TypeOf((*MockIPokemonRepository)(nil).StoreToCSV), arg0)
}
