// Code generated by MockGen. DO NOT EDIT.
// Source: routes/route.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// GetPokemon mocks base method.
func (m *MockController) GetPokemon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPokemon", w, r)
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockControllerMockRecorder) GetPokemon(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockController)(nil).GetPokemon), w, r)
}

// GetPokemonFromAPI mocks base method.
func (m *MockController) GetPokemonFromAPI(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPokemonFromAPI", w, r)
}

// GetPokemonFromAPI indicates an expected call of GetPokemonFromAPI.
func (mr *MockControllerMockRecorder) GetPokemonFromAPI(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonFromAPI", reflect.TypeOf((*MockController)(nil).GetPokemonFromAPI), w, r)
}

// GetPokemons mocks base method.
func (m *MockController) GetPokemons(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPokemons", w, r)
}

// GetPokemons indicates an expected call of GetPokemons.
func (mr *MockControllerMockRecorder) GetPokemons(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemons", reflect.TypeOf((*MockController)(nil).GetPokemons), w, r)
}

// GetPokemonsConcurrency mocks base method.
func (m *MockController) GetPokemonsConcurrency(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPokemonsConcurrency", w, r)
}

// GetPokemonsConcurrency indicates an expected call of GetPokemonsConcurrency.
func (mr *MockControllerMockRecorder) GetPokemonsConcurrency(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsConcurrency", reflect.TypeOf((*MockController)(nil).GetPokemonsConcurrency), w, r)
}

// GetPokemonsFromAPI mocks base method.
func (m *MockController) GetPokemonsFromAPI(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPokemonsFromAPI", w, r)
}

// GetPokemonsFromAPI indicates an expected call of GetPokemonsFromAPI.
func (mr *MockControllerMockRecorder) GetPokemonsFromAPI(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsFromAPI", reflect.TypeOf((*MockController)(nil).GetPokemonsFromAPI), w, r)
}
