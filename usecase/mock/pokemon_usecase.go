// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/pokemon.go

// Package mock is a generated GoMock package.
package mock

import (
	model "pokeapi/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewPokemonUsecase is a mock of NewPokemonUsecase interface.
type MockNewPokemonUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockNewPokemonUsecaseMockRecorder
}

// MockNewPokemonUsecaseMockRecorder is the mock recorder for MockNewPokemonUsecase.
type MockNewPokemonUsecaseMockRecorder struct {
	mock *MockNewPokemonUsecase
}

// NewMockNewPokemonUsecase creates a new mock instance.
func NewMockNewPokemonUsecase(ctrl *gomock.Controller) *MockNewPokemonUsecase {
	mock := &MockNewPokemonUsecase{ctrl: ctrl}
	mock.recorder = &MockNewPokemonUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewPokemonUsecase) EXPECT() *MockNewPokemonUsecaseMockRecorder {
	return m.recorder
}

// GetPokemon mocks base method.
func (m *MockNewPokemonUsecase) GetPokemon(pokemonId int) (model.Pokemon, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemon", pokemonId)
	ret0, _ := ret[0].(model.Pokemon)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockNewPokemonUsecaseMockRecorder) GetPokemon(pokemonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockNewPokemonUsecase)(nil).GetPokemon), pokemonId)
}

// GetPokemons mocks base method.
func (m *MockNewPokemonUsecase) GetPokemons() ([]model.Pokemon, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemons")
	ret0, _ := ret[0].([]model.Pokemon)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetPokemons indicates an expected call of GetPokemons.
func (mr *MockNewPokemonUsecaseMockRecorder) GetPokemons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemons", reflect.TypeOf((*MockNewPokemonUsecase)(nil).GetPokemons))
}

// GetPokemonsConcurrently mocks base method.
func (m *MockNewPokemonUsecase) GetPokemonsConcurrently(typeNumber string, items, itemsPerWorker int) ([]model.Pokemon, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonsConcurrently", typeNumber, items, itemsPerWorker)
	ret0, _ := ret[0].([]model.Pokemon)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetPokemonsConcurrently indicates an expected call of GetPokemonsConcurrently.
func (mr *MockNewPokemonUsecaseMockRecorder) GetPokemonsConcurrently(typeNumber, items, itemsPerWorker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsConcurrently", reflect.TypeOf((*MockNewPokemonUsecase)(nil).GetPokemonsConcurrently), typeNumber, items, itemsPerWorker)
}

// GetPokemonsFromExternalAPI mocks base method.
func (m *MockNewPokemonUsecase) GetPokemonsFromExternalAPI() (*[]model.SinglePokeExternal, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonsFromExternalAPI")
	ret0, _ := ret[0].(*[]model.SinglePokeExternal)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetPokemonsFromExternalAPI indicates an expected call of GetPokemonsFromExternalAPI.
func (mr *MockNewPokemonUsecaseMockRecorder) GetPokemonsFromExternalAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonsFromExternalAPI", reflect.TypeOf((*MockNewPokemonUsecase)(nil).GetPokemonsFromExternalAPI))
}
