// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interactor/pokeinteractor.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	model "github.com/ToteEmmanuel/academy-go-q12021/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPokeInteractor is a mock of PokeInteractor interface.
type MockPokeInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPokeInteractorMockRecorder
}

// MockPokeInteractorMockRecorder is the mock recorder for MockPokeInteractor.
type MockPokeInteractorMockRecorder struct {
	mock *MockPokeInteractor
}

// NewMockPokeInteractor creates a new mock instance.
func NewMockPokeInteractor(ctrl *gomock.Controller) *MockPokeInteractor {
	mock := &MockPokeInteractor{ctrl: ctrl}
	mock.recorder = &MockPokeInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokeInteractor) EXPECT() *MockPokeInteractorMockRecorder {
	return m.recorder
}

// CatchOne mocks base method.
func (m *MockPokeInteractor) CatchOne(arg0 int) (*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CatchOne", arg0)
	ret0, _ := ret[0].(*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CatchOne indicates an expected call of CatchOne.
func (mr *MockPokeInteractorMockRecorder) CatchOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatchOne", reflect.TypeOf((*MockPokeInteractor)(nil).CatchOne), arg0)
}

// Get mocks base method.
func (m *MockPokeInteractor) Get(id int) (*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPokeInteractorMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPokeInteractor)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockPokeInteractor) GetAll() ([]*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPokeInteractorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPokeInteractor)(nil).GetAll))
}

// GetAllWorkers mocks base method.
func (m *MockPokeInteractor) GetAllWorkers(arg0 string, arg1, arg2 int) ([]*model.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkers indicates an expected call of GetAllWorkers.
func (mr *MockPokeInteractorMockRecorder) GetAllWorkers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkers", reflect.TypeOf((*MockPokeInteractor)(nil).GetAllWorkers), arg0, arg1, arg2)
}
